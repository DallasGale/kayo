---
import styles from "./styles.module.scss";
import Card, { type CardProps } from "./card";

// import TalLoughnan from "../../assets/TAL_Loughnan.png";
// import TalJones from "../../assets/TAL_Jones.png";

import Brown from "../../assets/collegues/Brown.jpg";
import Buckley from "../../assets/collegues/Buckley.jpg";
import Eddie from "../../assets/collegues/eddie.jpg";
import Jones from "../../assets/collegues/Jones.jpg";
import Loughnan from "../../assets/collegues/Loughnan.jpg";
import Riewoldt from "../../assets/collegues/Riewoldt.jpg";
import Underwood from "../../assets/collegues/Underwood.jpg";

import Slider from "./slider";

const collegues: CardProps[] = [
  {
    avatar: Brown.src,
    name: "John Doe",
    role: "Senior Producer",
  },
  {
    avatar: Buckley.src,
    name: "John Doe",
    role: "Senior Producer",
  },
  {
    avatar: Eddie.src,
    name: "John Doe",
    role: "Senior Producer",
  },
  {
    avatar: Jones.src,
    name: "John Doe",
    role: "Senior Producer",
  },
  {
    avatar: Loughnan.src,
    name: "John Doe",
    role: "Senior Producer",
  },
  {
    avatar: Riewoldt.src,
    name: "John Doe",
    role: "Senior Producer",
  },
  {
    avatar: Underwood.src,
    name: "John Doe",
    role: "Senior Producer",
  },
];
---

<script>
  // window.addEventListener("load", () => {
  // const progressBar = document.querySelector("#progress-bar") as HTMLDivElement;
  // progressBar.style.left = "3%";
  const slideContainer: HTMLDivElement | null =
    document.querySelector("#slide-container");

  const scrollX = slideContainer?.scrollLeft;
  const width = slideContainer?.clientWidth;
  const scrollWidth = slideContainer?.scrollWidth;
  const progressBar = document.querySelector("#progress-bar") as HTMLDivElement;
  console.log({ scrollX, width, scrollWidth });

  if (scrollX && width && scrollWidth) {
    progressBar.style.left = `calc(${(scrollX / (scrollWidth - width)) * 100}%)`;
  }

  slideContainer?.addEventListener("scroll", (e) => {
    // if parent is being scrolled check the scrollX distance from the left and compare it to the width of the parent
    const scrollX = slideContainer.scrollLeft || 0;
    const width = slideContainer.clientWidth || 0;
    const scrollWidth = slideContainer.scrollWidth || 0;
    console.log({ scrollX, width, scrollWidth });
    const progressBar = document.querySelector(
      "#progress-bar",
    ) as HTMLDivElement;

    let percent = (scrollX / (scrollWidth - width)) * 90;
    console.log({ percent });

    if (percent < 2) return;
    progressBar.style.left = `calc(${percent}%)`;
  });
  console.log("loaded");
  // });
</script>

<section>
  <div class="content">
    <div class="container">
      <div class="title">
        <h6 class="display-1">Your future colleagues</h6>
      </div>

      <div class="swiper">
        <div class="swiper-wrapper">
          {
            collegues.map((collegue: CardProps) => {
              return (
                <div class="swiper-slide" style={{ width: "auto" }}>
                  <Card {...collegue} client:load />
                </div>
              );
            })
          }
          <div class="swiper-slide" style={{ width: "auto" }}></div>
        </div>

        <div class="swiper-scrollbar"></div>
      </div>
    </div>
  </div>
</section>

<script>
  import Swiper from "swiper";
  import { Virtual, Navigation, Pagination, Scrollbar } from "swiper/modules";
  import "swiper/css";
  import "swiper/css/navigation";
  import "swiper/css/pagination";

  // Initialize Swiper after the DOM is loaded
  function initSwiper() {
    const swiper = new Swiper(".swiper", {
      modules: [Virtual, Navigation, Pagination, Scrollbar],
      slidesPerView: "auto",
      spaceBetween: 20,
      scrollbar: {
        el: ".swiper-scrollbar",
        hide: true,
      },
      speed: 800,
      pagination: {
        el: ".swiper-pagination",
        clickable: true,
      },
      // Remove virtual slides since we're rendering them directly
      observer: true,
      observeParents: true,
    });
  }

  // Wait for the DOM to be fully loaded
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initSwiper);
  } else {
    initSwiper();
  }
</script>
<style lang="scss">
  @import "../../breakpoints.scss";

  .title {
    padding: 0 42px 32px;
  }
  /* Add these global styles for Swiper */
  :global(.swiper) {
    width: 100%;
    overflow: hidden;
    padding: 0 20px;
    margin-top: 0;
  }

  :global(.swiper-wrapper) {
    display: flex;
    width: max-content;
  }

  :global(.swiper-slide) {
    width: 280px !important; /* Or whatever width your Card component should be */
    flex-shrink: 0;
  }

  :global(.swiper-scrollbar) {
    bottom: 0 !important;
  }

  :global(
      .swiper-horizontal > .swiper-scrollbar,
      .swiper-scrollbar.swiper-scrollbar-horizontal
    ) {
    background-color: var(--black);
    opacity: 1 !important;
    height: 21px;
    box-sizing: border-box;
    border-top: 10px solid var(--kayogreen);
    border-bottom: 10px solid var(--kayogreen);
    padding-left: 20px;
    width: calc(100% - 2 * var(--swiper-scrollbar-sides-offset, 2.5%));
  }

  :global(.swiper-scrollbar-drag) {
    background: var(--darkgrey);
    top: -5px;
    height: 10px;
    border-radius: 0;
    &:after,
    &:before {
      content: "";
      width: 30px;
      height: 100%;
      right: -20px;
      position: absolute;
      top: 0;
      background-color: var(--black);
      transform: skew(-40deg) !important;
    }

    &::before {
      left: -20px;
    }
  }
  section {
    background-color: var(--kayogreen);
  }

  .content {
    overflow: hidden;
    max-width: 1440px;
    padding: 0;
  }
  .container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: auto;
    width: 100%;
    padding-top: 64px;
  }

  @media screen and (min-width: $breakpoint-desktop) {
    .title {
      padding: 0 42px 45px;
    }
    .container {
      align-items: flex-start;
      padding-top: 118px;
    }
    :global(.swiper-slide) {
      width: 400px !important; /* Larger width for desktop if needed */
      &:last-child {
        margin-right: 0 !important;
      }
    }
  }
</style>
