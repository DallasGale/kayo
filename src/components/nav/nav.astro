<script>
  // Add breakpoint constants
  const BREAKPOINTS = {
    TABLET: 768, // Matching $breakpoint-tablet
  };

  // Function to get transform values based on screen width
  function getTransformValues(screenWidth: number) {
    const isNarrowScreen = screenWidth < BREAKPOINTS.TABLET;

    return {
      hero: "-220%",
      whatYouWin: !isNarrowScreen ? "-75%" : "-78%",
      howToEnter: !isNarrowScreen ? "-50%" : "-55%",
      haveAQuestion: !isNarrowScreen ? "-25%" : "-29%",
      superSaturdayLive: "0%",
    };
  }

  // Function to update nav follower position
  function updateNavFollowerPosition(id: string, navFollower: HTMLElement) {
    const transforms = getTransformValues(window.innerWidth);
    const transform = transforms[id as keyof typeof transforms];

    if (transform !== undefined) {
      navFollower.style.transform = `translateX(${transform}) skew(-25deg)`;
    }
  }

  // Function to scroll active anchor into view
  function scrollAnchorIntoView(anchorId: string, isScrolling = false) {
    const anchor = document.getElementById(anchorId);
    const navWrapper = document.querySelector(".nav-wrapper");

    if (anchor && navWrapper && window.innerWidth < BREAKPOINTS.TABLET) {
      // Calculate the center position
      const navWrapperWidth = navWrapper.clientWidth;
      const anchorLeft = anchor.offsetLeft;
      const anchorWidth = anchor.clientWidth;

      // Calculate scroll position that will center the element
      const scrollPosition = anchorLeft - navWrapperWidth / 2 + anchorWidth / 2;
      const scrollBehavior: ScrollBehavior = isScrolling ? "auto" : "smooth";

      // Smooth scroll to the position
      navWrapper.scrollTo({
        left: scrollPosition,
        behavior: scrollBehavior,
      });
    }
  }

  // Debounce function to limit the frequency of scroll handling
  function debounce<T extends (...args: any[]) => void>(
    func: T,
    wait: number,
  ): (...args: Parameters<T>) => void {
    let timeout: ReturnType<typeof setTimeout> | null = null;

    return (...args: Parameters<T>) => {
      if (timeout) clearTimeout(timeout);
      timeout = setTimeout(() => func(...args), wait);
    };
  }

  // Create a function to handle intersection observer setup
  function setupIntersectionObserver() {
    // Options for the observer
    const options = {
      root: null, // use viewport as root
      rootMargin: "0px",
      threshold: 0.5, // trigger when 10% of target is visible
    };

    const nav = document.querySelector(".nav-wrapper");
    const navFollower = document.getElementById("nav-follower");
    const whatYouWinAnchor = document.getElementById("what-you-win-anchor");
    const howItWorksAnchor = document.getElementById("how-to-enter-anchor");
    const haveAQuestionAnchor = document.getElementById(
      "have-a-question-anchor",
    );
    const superSaturdayLiveAnchor = document.getElementById(
      "super-saturday-live-anchor",
    );

    //  Track if user is actively scrolling
    let isScrolling = false;
    let scrollTimeout: ReturnType<typeof setTimeout>;

    // Handle scroll events
    window.addEventListener(
      "scroll",
      () => {
        isScrolling = true;
        clearTimeout(scrollTimeout);

        // Reset scroll state after scrolling stops
        scrollTimeout = setTimeout(() => {
          isScrolling = false;
        }, 150);
      },
      { passive: true },
    );

    // Callback function to handle intersections
    const handleIntersect = debounce((entries: IntersectionObserverEntry[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting && navFollower) {
          console.log(`Section ${entry.target.id} is now visible`);

          const { id } = entry.target;
          // Reset all active states
          const resetActiveStates = () => {
            whatYouWinAnchor?.classList.remove("active");
            howItWorksAnchor?.classList.remove("active");
            haveAQuestionAnchor?.classList.remove("active");
            superSaturdayLiveAnchor?.classList.remove("active");
          };

          switch (id) {
            case "hero":
              resetActiveStates();
              updateNavFollowerPosition("hero", navFollower);
              scrollAnchorIntoView("what-you-win-anchor", isScrolling);
              nav?.classList.remove("hidden");
              break;

            case "what-you-win":
              resetActiveStates();
              whatYouWinAnchor?.classList.add("active");
              updateNavFollowerPosition("whatYouWin", navFollower);
              // scrollAnchorIntoView("what-you-win-anchor", isScrolling);
              nav?.classList.remove("hidden");
              break;

            case "how-to-enter":
              resetActiveStates();
              whatYouWinAnchor?.classList.add("active");
              howItWorksAnchor?.classList.add("active");
              updateNavFollowerPosition("howToEnter", navFollower);
              scrollAnchorIntoView("how-to-enter-anchor", isScrolling);
              nav?.classList.remove("hidden");
              break;

            case "have-a-question":
              resetActiveStates();
              whatYouWinAnchor?.classList.add("active");
              howItWorksAnchor?.classList.add("active");
              haveAQuestionAnchor?.classList.add("active");
              updateNavFollowerPosition("haveAQuestion", navFollower);
              scrollAnchorIntoView("have-a-question-anchor", isScrolling);
              nav?.classList.remove("hidden");
              break;

            case "super-saturday-live":
              resetActiveStates();
              superSaturdayLiveAnchor?.classList.add("active");
              whatYouWinAnchor?.classList.add("active");
              howItWorksAnchor?.classList.add("active");
              haveAQuestionAnchor?.classList.add("active");
              updateNavFollowerPosition("superSaturdayLive", navFollower);
              scrollAnchorIntoView("super-saturday-live-anchor", isScrolling);
              nav?.classList.remove("hidden");
              break;
          }

          // Uncomment the next line if you want to stop observing after first intersection
          // observer.unobserve(entry.target);
        }
      });
    }, 50);

    // Create the observer
    const observer = new IntersectionObserver(handleIntersect, options);

    // Select all sections you want to observe
    const sections = document.querySelectorAll("[id]");

    // Start observing each section
    sections.forEach((section) => {
      console.log({ section });
      observer.observe(section);
    });

    // Add resize listener to update positions when screen size changes
    window.addEventListener("resize", () => {
      const visibleSection = Array.from(sections).find((section) => {
        const rect = section.getBoundingClientRect();
        return (
          rect.top <= window.innerHeight / 2 &&
          rect.bottom >= window.innerHeight / 2
        );
      });

      if (visibleSection && navFollower) {
        updateNavFollowerPosition(visibleSection.id, navFollower);
        if (visibleSection.id !== "hero") {
          scrollAnchorIntoView(`${visibleSection.id}-anchor`);
        }
      }
    });

    // Add click handlers to smooth scroll the nav
    document.querySelectorAll(".nav a").forEach((anchor) => {
      anchor.addEventListener("click", (e) => {
        const href = (e.currentTarget as HTMLAnchorElement).getAttribute(
          "href",
        );
        if (href?.startsWith("#")) {
          e.preventDefault();
          const targetId = href.substring(1);
          const targetSection = document.getElementById(targetId);
          targetSection?.scrollIntoView({ behavior: "smooth" });

          // Scroll the nav item into view as well
          scrollAnchorIntoView(`${targetId}-anchor`);
        }
      });
    });

    return observer;
  }

  // Initialize the observer when the DOM is ready
  document.addEventListener("DOMContentLoaded", () => {
    const observer = setupIntersectionObserver();
  });
</script>

<div class="nav-wrapper">
  <nav class="nav">
    <ul>
      <li id="what-you-win-anchor">
        <a href="#what-you-win" class="anchor">What you win</a>
      </li>
      <li id="how-to-enter-anchor">
        <a href="#how-to-enter" href="/about" class="anchor">How to enter</a>
      </li>
      <li id="have-a-question-anchor">
        <a href="#have-a-question" href="/blog" class="anchor"
          >Have a question?</a
        >
      </li>
      <li id="super-saturday-live-anchor">
        <a href="#super-saturday-live" href="/blog" class="anchor"
          >Super saturday live</a
        >
      </li>
    </ul>
    <div id="nav-follower" class="nav-follower"></div>
  </nav>
</div>

<style lang="scss">
  @import "../../breakpoints.scss";

  @keyframes animateNav {
    0% {
      transform: translateY(100%);
    }
    100% {
      transform: translateY(0);
    }
  }
  .nav-wrapper {
    overflow: scroll;
    width: 100vw;
    position: fixed;
    bottom: 0;
    z-index: 20;
    transform: translateY(100%);
    background-color: var(--black);
    height: auto;
    // display: none;
    transition: all 0.35s ease-out;
    align-items: center;
    animation: animateNav 600ms forwards linear;
    animation-timing-function: cubic-bezier(0.46, 0.03, 0.52, 0.96);
    animation-delay: 5.5s;
    will-change: transform;
    &.hidden {
      transition: all 0.35s ease-out;
    }
  }
  .nav {
    position: relative;
    width: 100%;
    display: flex;
    justify-content: space-between;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 164vw;
  }
  ul {
    display: flex;
    flex-direction: row;
    justify-content: space-around;
    width: 100%;
    align-items: center;
    margin: 0;
    &:before {
      content: "";
      position: absolute;
      width: 100%;
      height: 2px;
      right: 0;
      border-bottom: 2px dotted var(--kayogreen);
      z-index: -2;
    }
  }
  .anchor {
    padding: 0 10px;
    color: var(--kayogreen);
    font-size: 15px;
    text-transform: uppercase;
    font-family: "GibsonSemiBold", sans-serif;
    text-decoration: none;
    position: relative;
    &:before {
      content: "";
      height: 20px;
      width: 100%;
      background-color: var(--black);
      right: 0;
      top: 0;
      transition: all 0.25s ease-out;
      position: absolute;
      z-index: -1;
    }
  }

  li {
    height: 56px;
    display: flex;
    align-items: center;
    padding: 0 0;
    position: relative;
  }

  li.active {
    .anchor {
      color: var(--black);
      background-color: transparent;
      transition: none;
      transition: all 0.25s ease-out;
      &:first-of-type {
        &:before {
          width: 100%;
          transform: translateX(0);
          transition: all 0.35s ease-out;
        }
      }
      &:before {
        width: 0%;
        transform: translateX(0);
        transition: all 0.25s ease-out;
      }
    }
  }

  .nav-follower {
    position: absolute;
    width: 164vw;
    height: 100%;
    background-color: var(--kayogreen);
    bottom: 0;
    transform: translateX(-200%) skew(-25deg);
    z-index: -1;
    transition: all 0.35s ease-out;
    &:before {
      content: "";
      background-color: var(--kayogreen);
      left: -1400px;
      width: 2000px;
      position: absolute;
      height: 100%;
    }
  }
  @media screen and (min-width: $breakpoint-tablet) {
    .nav {
      width: 100%;
    }

    .nav-follower {
      width: 100vw;
    }
  }

  @media screen and (min-width: $breakpoint-desktop) {
    .nav-wrapper {
      display: flex;
      justify-content: center;
    }

    ul {
      max-width: 1440px;
    }
  }
  @media screen and (min-width: $breakpoint-widescreen) {
    .nav-follower {
      width: 1440px;
    }
  }
</style>
