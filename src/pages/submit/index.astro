---
import Form from "../../components/form/";
import Layout from "../../layouts/layout.astro";
import Footer from "../../components/footer/index.astro";
---

<Layout title="Kayo Sports Call Up - Submit Your Entry">
  <Form client:load />

  <div class="lottie-container" id="lottie-container"></div>
  <div class="lottie-container" id="lottie-container-2"></div>
  <div class="lottie-container" id="lottie-container-3"></div>
  <div class="lottie-container" id="lottie-container-4"></div>
  <Footer isLandingPage={false} />
</Layout>

<script>
  import lottie from "lottie-web";
  import animationData from "../../assets/lotti/confetti.json";

  document.addEventListener("statusChange", (event) => {
    const status = (event as CustomEvent).detail.status;

    const animations = [
      {
        id: "lottie-container",
        delay: 0,
        dimensions: { width: 500, height: 500 },
      },
      {
        id: "lottie-container-2",
        delay: 150,
        dimensions: { width: 1000, height: 1000 },
      },
      {
        id: "lottie-container-3",
        delay: 300,
        dimensions: { width: 1500, height: 1500 },
      },
      {
        id: "lottie-container-4",
        delay: 450,
        dimensions: { width: 4000, height: 4000 },
      },
    ];

    // Base configuration for all animations
    const baseConfig = {
      renderer: "svg",
      loop: false,
      autoplay: true,
      animationData: animationData,
      rendererSettings: {
        preserveAspectRatio: "xMidYMid slice",
        clearCanvas: true,
        progressiveLoad: false,
        hideOnTransparent: true,
      },
    };
    // Update the page based on status
    if (status === "success") {
      // Initialize lottie animation
      animations.forEach(({ id, delay, dimensions }) => {
        const container = document.getElementById(id);
        if (container) {
          setTimeout(() => {
            lottie.loadAnimation({
              ...baseConfig,
              container,
              rendererSettings: {
                ...baseConfig.rendererSettings,
                ...dimensions,
              },
            });
          }, delay);
        }
      });
    } else {
      console.log("no success");
    }
  });
</script>

<script>
  import { analyticsUtils } from "../../firebase/client";
  // Log page view on initial load
  document.addEventListener("DOMContentLoaded", () => {
    analyticsUtils.logPageView(window.location.pathname, document.title);
  });

  // Log page view on client-side navigation (if using View Transitions or client routing)
  document.addEventListener("astro:page-load", () => {
    analyticsUtils.logPageView(window.location.pathname, document.title);
  });
</script>
<style>
  header {
    box-sizing: border-box;
    padding: 40px 0 40px 40px;
    max-width: 1440px;
    position: absolute;
    width: 100%;
    left: 0;
    right: 0;
    margin: auto;
    z-index: 2;
  }

  .lottie-container {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 3;
    pointer-events: none;
  }
  #lottie-container-1 {
    transform: scale(2);
  }
  #lottie-container-2 {
    transform: scale(1);
  }
  #lottie-container-3 {
    transform: scale(2.2);
  }
  #lottie-container-4 {
    transform: scale(1.3);
  }
</style>
